AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  (SO8010)

  CloudFormation for RecSys StepFuncs


Parameters:
  NamePrefix:
    Type: String
    Default: rs-news-customize-dev

  Stage:
    Type: String
    Default: dev

  StepFuncAndLambdaRoleName:
    Type: String
    Default: LambdaAndStepFuncsRole

  SagemakerRoleName:
    Type: String
    Default: SMRole

  S3UtilLabmda:
    Type: String
    Default: S3UtilLabmda

  PreCheckLabmda:
    Type: String
    Default: PreCheckLabmda

  SNSMessageLambda:
    Type: String
    Default: SNSMessageLambda
    
#  ECRPrefix:
#    Type: String
#    Default: 522244679887.dkr.ecr.ap-northeast-1.${AWS::URLSuffix}

Resources:
  SMProcessingStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-SMProcessingStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Run processing",
          "States": {
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::sagemaker:createProcessingJob.sync",
              "Parameters": {
                "AppSpecification": {
                  "ImageUri.$": "States.Format('${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/{}:${Stage}', $.ImageName)",
                  "ContainerArguments.$": "$.ContainerArguments"
                },
                "ProcessingResources": {
                  "ClusterConfig": {
                    "InstanceCount": 1,
                    "InstanceType.$": "$.InstanceType",
                    "VolumeSizeInGB": 5
                  }
                },
                "RoleArn": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/rs-${Stage}-${SagemakerRoleName}-${AWS::Region}",
                "ProcessingJobName.$": "States.Format('{}', $$.Execution.Name)"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "ThrottlingException",
                    "SageMaker.AmazonSageMakerException"
                  ],
                  "IntervalSeconds": 4,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultSelector": {
                "ProcessingJobName.$": "$.ProcessingJobName",
                "ProcessingJobStatus.$": "$.ProcessingJobStatus"
              },
              "ResultPath": "$.RunProcessing",
              "End": true
            }
          }
        }

  ActionPreprocessingStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-ActionPreprocessingStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                    "system/ingest-data/action/"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-action-preprocessing",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Nactionpre{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  ActionPreprocessingForPopularityStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-ActionPreprocessingForPopularityStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                    "system/ingest-data/action/"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-action-preprocessing",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}', '--only4popularity', '1')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Nactionact4pop{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  PrepareTrainingDataStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-PrepareTrainingDataStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                    "system/ingest-data/action/",
                    "feature/content/inverted-list/news_id_news_feature_dict.pickle",
                    "feature/action/raw_embed_user_mapping.pickle"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-prepare-training-data",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Npretraing{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  UserPreprocessingStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-UserPreprocessingStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                    "system/ingest-data/user/"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-user-preprocessing",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Nactionpre{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }
  # news-add-item-batch
  AddItemBatchStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-AddItemBatchStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "system/item-data/item.csv"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-add-item-batch",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Nadditemb{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-add-user-batch
  AddUserBatchStepFunc:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
        StateMachineName: !Sub ${NamePrefix}-AddUserBatchStepFunc
        DefinitionString: !Sub |
          {
            "StartAt": "Pre check",
            "States": {
              "Pre check": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                  "Payload": {
                    "bucket.$": "$.Bucket",
                    "prefix.$": "$.S3Prefix",
                    "file_list": [
                     "system/user-data/user.csv"
                    ]
                  }
                },
                "ResultSelector": {
                  "Payload.$": "$.Payload"
                },
                "ResultPath": "$.Precheck",
                "Next": "Run processing"
              },
              "Run processing": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
                "Parameters": {
                  "Input": {
                    "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                    "ImageName": "rs/news-add-user-batch",
                    "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                    "InstanceType": "ml.m5.xlarge"
                  },
                  "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                  "Name.$": "States.Format('Nadduserb{}', $.Precheck.Payload.UID)"
                },
                "End": true
              }
            }
          }

  # news-inverted-list
  InvertedListStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-InvertedListStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "system/item-data/item.csv",
                   "model/meta_files/kg_dbpedia.txt",
                   "model/meta_files/entities_dbpedia.dict",
                   "model/meta_files/relations_dbpedia.dict",
                   "model/meta_files/entity_industry.txt"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-inverted-list",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Ninverted{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-item-preprocessing
  ItemPreprocessingStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-ItemPreprocessingStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "system/ingest-data/item/"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-item-preprocessing",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Nitempre{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-portrait-batch
  PortraitBatchStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-PortraitBatchStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "system/action-data/action.csv",
                   "feature/content/inverted-list/news_id_news_property_dict.pickle"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-portrait-batch",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Nportrait{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-recall-batch
  RecallBatchStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-RecallBatchStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "system/action-data/action.csv",
                   "feature/recommend-list/portrait/portrait.pickle",
                   "feature/content/inverted-list/news_id_news_property_dict.pickle",
                   "feature/content/inverted-list/news_type_news_ids_dict.pickle",
                   "feature/content/inverted-list/news_entities_news_ids_dict.pickle",
                   "feature/content/inverted-list/news_keywords_news_ids_dict.pickle",
                   "feature/content/inverted-list/news_words_news_ids_dict.pickle",
                   "feature/content/inverted-list/recall_config.pickle"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-recall-batch",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Nrecall{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-weight-update-batch
  WeightUpdateBatchStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-WeightUpdateBatchStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "model/meta_files/kg_dbpedia.txt",
                   "model/meta_files/entities_dbpedia.dict",
                   "model/meta_files/relations_dbpedia.dict",
                   "model/meta_files/entity_industry.txt"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-weight-update-batch",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Nweightu{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-filter-batch
  FilterBatchStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-FilterBatchStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "feature/recommend-list/news/recall_batch_result.pickle",
                   "feature/recommend-list/news/rank_batch_result.pickle",
                   "feature/content/inverted-list/news_id_news_property_dict.pickle",
                   "feature/content/inverted-list/news_type_news_ids_dict.pickle"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-filter-batch",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Nfilter{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-rank-batch
  RankBatchStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-RankBatchStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "feature/recommend-list/news/recall_batch_result.pickle",
                   "feature/recommend-list/portrait/portrait.pickle",
                   "feature/content/inverted-list/news_id_news_property_dict.pickle",
                   "model/rank/action/dkn/latest/model.tar.gz",
                   "model/rank/content/dkn_embedding_latest/dkn_context_embedding.npy",
                   "model/rank/content/dkn_embedding_latest/dkn_word_embedding.npy"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-rank-batch",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Nrank{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-item-feature-update-batch
  ItemFeatureUpdateBatchStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-ItemFeatureUpdateBatchStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                    "model/rank/content/dkn_embedding_latest/complete_dkn_word_embedding.npy",
                    "system/item-data/item.csv",
                    "model/meta_files/entities_dbpedia.dict",
                    "model/meta_files/relations_dbpedia.dict",
                    "model/meta_files/kg_dbpedia.txt",
                    "model/meta_files/entities_dbpedia_train.dict",
                    "model/meta_files/relations_dbpedia_train.dict",
                    "model/meta_files/kg_dbpedia_train.txt",
                    "model/meta_files/entity_industry.txt"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-item-feature-update-batch",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix, '--region', '${AWS::Region}')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-SMProcessingStepFunc",
                "Name.$": "States.Format('Nitemfeat{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }


  ########################################################################################
  # Training step funcs
  ########################################################################################

  ModelUpdateEmbeddingStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-ModelUpdateEmbeddingStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                     "model/meta_files/kg_dbpedia_train.txt",
                     "model/meta_files/kg_dbpedia.txt",
                     "model/meta_files/entities_dbpedia.dict",
                     "model/meta_files/entities_dbpedia_train.dict",
                     "model/meta_files/relations_dbpedia.dict",
                     "model/meta_files/relations_dbpedia_train.dict",
                     "model/meta_files/entity_industry.txt"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Train embedding model"
            },
            "Train embedding model": {
              "Resource": "arn:${AWS::Partition}:states:::sagemaker:createTrainingJob.sync",
              "Parameters": {
                "AlgorithmSpecification": {
                  "TrainingImage": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/rs/news-model-update-embedding:${Stage}",
                  "TrainingInputMode": "File",
                  "MetricDefinitions": [
                    {
                      "Name": "average loss",
                      "Regex": "average loss: (.*)"
                    }
                  ]
                },
                "OutputDataConfig": {
                  "S3OutputPath.$": "States.Format('s3://{}/{}/model/rank/content/dkn_embedding_train_output/', $.Bucket,  $.S3Prefix)"
                },
                "StoppingCondition": {
                  "MaxRuntimeInSeconds": 86400
                },
                "ResourceConfig": {
                  "InstanceCount": 1,
                  "InstanceType": "ml.p2.xlarge",
                  "VolumeSizeInGB": 5
                },
                "RoleArn": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/rs-${Stage}-${SagemakerRoleName}-${AWS::Region}",
                "HyperParameters": {
                   "bucket.$": "$.Bucket",
                   "prefix.$": "$.S3Prefix",
                   "region": "${AWS::Region}"
                },
                "TrainingJobName.$": "States.Format('Ntrainembedding-{}', $.Precheck.Payload.UID)"
              },
              "Type": "Task",
              "End": true
            }
          }
        }

  # model/rank/action/dkn/latest/model.tar.gz
  ModelUpdateActionStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-ModelUpdateActionStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                    "system/action-data/action_train.csv",
                    "system/action-data/action_val.csv",
                    "model/rank/content/dkn_embedding_latest/dkn_entity_embedding.npy",
                    "model/rank/content/dkn_embedding_latest/dkn_context_embedding.npy",
                    "model/rank/content/dkn_embedding_latest/dkn_word_embedding.npy"
                  ]
                }
              },
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Type": "Task",
              "ResultPath": "$.Precheck",
              "Next": "Train action model"
            },
            "Train action model": {
              "Resource": "arn:${AWS::Partition}:states:::sagemaker:createTrainingJob.sync",
              "Parameters": {
                "AlgorithmSpecification": {
                  "TrainingImage": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/rs/news-model-update-action:${Stage}",
                  "TrainingInputMode": "File",
                  "MetricDefinitions": [
                    {
                      "Name": "average loss",
                      "Regex": "average loss: (.*)"
                    }
                  ]
                },
                "InputDataConfig": [
                  {
                    "DataSource": {
                      "S3DataSource": {
                        "S3DataType": "S3Prefix",
                        "S3Uri.$": "States.Format('s3://{}/{}/system/action-data/action_train.csv', $.Bucket,  $.S3Prefix)",
                        "S3DataDistributionType": "FullyReplicated"
                      }
                    },
                    "ChannelName": "training"
                  },
                  {
                    "DataSource": {
                      "S3DataSource": {
                        "S3DataType": "S3Prefix",
                        "S3Uri.$": "States.Format('s3://{}/{}/system/action-data/action_val.csv', $.Bucket,  $.S3Prefix)",
                        "S3DataDistributionType": "FullyReplicated"
                      }
                    },
                    "ChannelName": "validation"
                  }
                ],
                "OutputDataConfig": {
                  "S3OutputPath.$": "States.Format('s3://{}/{}/model/rank/action/dkn_train_output/', $.Bucket,  $.S3Prefix)"
                },
                "StoppingCondition": {
                  "MaxRuntimeInSeconds": 86400
                },
                "ResourceConfig": {
                  "InstanceCount": 1,
                  "InstanceType": "ml.p2.xlarge",
                  "VolumeSizeInGB": 5
                },
                "RoleArn": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/rs-${Stage}-${SagemakerRoleName}-${AWS::Region}",
                "HyperParameters": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "region": "${AWS::Region}"
                },
                "TrainingJobName.$": "States.Format('Ntrainaction-{}', $.Precheck.Payload.UID)"
              },
              "Type": "Task",
              "End": true
            }
          }
        }

  ######################################
  #######################################

  NotificationStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-NotificationStepFunc
      DefinitionString: !Sub |
        {
            "StartAt": "Send notification",
            "States": {
                "Send notification": {
                    "Type": "Task",
                    "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
                    "Parameters": {
                        "FunctionName": "rs-${Stage}-${SNSMessageLambda}",
                        "Payload": {
                            "file_type.$": "$.file_type",
                            "message_type": "news",
                            "Bucket.$": "$.Bucket",
                            "S3Prefix.$": "$.S3Prefix"
                        }
                    },
                "End": true
                }
            }
        }

