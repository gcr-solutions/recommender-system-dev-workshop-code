version: 0.2

env:
  variables:
    APP_NAME: "recall"
    PLUGIN_NAME: "recall-plugin"
    SCENARIOS: "news"
  secrets-manager:
    APP_CONF_REPO: gcr-rs-dev-workshop-secret:appConfRepo     

phases:
    install:
      commands:
        - export CODEBUILD_GIT_MESSAGE="$(git log -1 --pretty=%B)"
        - echo $CODEBUILD_GIT_MESSAGE
        - echo $AWS_DEFAULT_REGION
        - aws --version
    pre_build:
        commands:
          - echo Logging in to Amazon ECR...
          - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
          - ACCOUNT_ID=$(aws sts get-caller-identity|jq -r '.Account')
          - IMAGE_TAG=$CODEBUILD_RESOLVED_SOURCE_VERSION
          - |
            echo "-------------------pre_build app------------------------------------------------"
            APP_IMAGE=rs/$APP_NAME
            APP_REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$APP_IMAGE
            if [[ $AWS_DEFAULT_REGION =~ ^cn.* ]]; then
                APP_REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com.cn/$APP_IMAGE
            fi
            aws ecr create-repository \
              --repository-name $APP_IMAGE \
              --image-scanning-configuration scanOnPush=true \
              --region $AWS_DEFAULT_REGION || true
            echo "--------------------------------------------------------------------------------"
          - |
            echo "-------------------pre_build plugin---------------------------------------------"
            PLUGIN_IMAGE=rs/$PLUGIN_NAME
            PLUGIN_REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$PLUGIN_IMAGE
            if [[ $AWS_DEFAULT_REGION =~ ^cn.* ]]; then
                PLUGIN_REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com.cn/$PLUGIN_IMAGE
            fi

            aws ecr create-repository \
              --repository-name $PLUGIN_IMAGE \
              --image-scanning-configuration scanOnPush=true \
              --region $AWS_DEFAULT_REGION || true
            echo "--------------------------------------------------------------------------------"
    build:
        commands:
          - echo Build started on `date`
          - |
            echo "------------------build app image-----------------------------------------------"
            set -e
            cd $CODEBUILD_SRC_DIR/src/$APP_NAME
            echo Building $APP_IMAGE:$IMAGE_TAG...
            docker build . -t $APP_IMAGE:$IMAGE_TAG
            echo Tagging $APP_REPOSITORY_URI:$IMAGE_TAG...
            docker tag $APP_IMAGE:$IMAGE_TAG $APP_REPOSITORY_URI:$IMAGE_TAG
            echo "--------------------------------------------------------------------------------"
          - |
            echo "------------------build plugin--------------------------------------------------"
            set -e
            for SCENARIO in $SCENARIOS
            do
              echo "start build plugin" $SCENARIO
              cd $CODEBUILD_SRC_DIR/src/$APP_NAME/plugins/$SCENARIO
              echo Building $PLUGIN_IMAGE:$SCENARIO-$IMAGE_TAG
              cp -r ../../pb .
              docker build . -t $PLUGIN_IMAGE:$SCENARIO-$IMAGE_TAG
              echo Tagging $PLUGIN_REPOSITORY_URI:$SCENARIO-$IMAGE_TAG...
              docker tag $PLUGIN_IMAGE:$SCENARIO-$IMAGE_TAG $PLUGIN_REPOSITORY_URI:$SCENARIO-$IMAGE_TAG
              echo "build plugin " $SCENARIO "end"
            done
              echo "------------------build plugin end--------------------------------------------------"

    post_build:
        commands:
          - echo Build completed on `date`
          - |
            echo "------------------push app image------------------------------------------------"
            docker push $APP_REPOSITORY_URI:$IMAGE_TAG
            echo "--------------------------------------------------------------------------------"
          - |
            echo "------------------push plugin image---------------------------------------------"
            for SCENARIO in $SCENARIOS
            do
              echo "push " $SCENARIO
              docker push $PLUGIN_REPOSITORY_URI:$SCENARIO-$IMAGE_TAG
            done
            echo "--------------------------------------------------------------------------------"

          - cd; mkdir workspace; cd workspace 
          - pip install git-remote-codecommit
          - git clone codecommit::$AWS_DEFAULT_REGION://$APP_CONF_REPO    
          - git config --global user.email "robot@codebuild.aws"
          - git config --global user.name "robot"
          - cd $APP_CONF_REPO
          - cd manifests/envs
          - docker pull public.ecr.aws/t8u1z3c8/k8s.gcr.io/kustomize/kustomize:v3.8.7
          - |
            for SCENARIO in $SCENARIOS
            do          
              cd $SCENARIO-dev
              docker run --rm --entrypoint /app/kustomize --workdir /app/src -v $(pwd):/app/src public.ecr.aws/t8u1z3c8/k8s.gcr.io/kustomize/kustomize:v3.8.7 edit set image rs/$APP_NAME=$APP_REPOSITORY_URI:$IMAGE_TAG
              docker run --rm --entrypoint /app/kustomize --workdir /app/src -v $(pwd):/app/src public.ecr.aws/t8u1z3c8/k8s.gcr.io/kustomize/kustomize:v3.8.7 edit set image rs/$PLUGIN_NAME=$PLUGIN_REPOSITORY_URI:$SCENARIO-$IMAGE_TAG
              cat kustomization.yaml
              cd ../
            done
            cd ../../
          - git add -A
          - git commit -m "${CODEBUILD_GIT_MESSAGE}"
          - git pull --rebase
          - git push